{
	"name": "dFlowinCustomerData",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "inCustomerData",
						"type": "DatasetReference"
					},
					"name": "inCustomerData"
				},
				{
					"dataset": {
						"referenceName": "outDimGeography",
						"type": "DatasetReference"
					},
					"name": "InDimGeography"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "outDimCustomer",
						"type": "DatasetReference"
					},
					"name": "sinkSQLServerCustomerData"
				}
			],
			"transformations": [
				{
					"name": "MergeCustonDataDimGeography"
				},
				{
					"name": "SelectImputDimCustomer"
				},
				{
					"name": "AlterRowUpsetDimCustomer"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CustomerAlternateKey as string,",
				"          City as string,",
				"          CountryRegionCode as string,",
				"          FirstName as string,",
				"          MiddleName as string,",
				"          LastName as string,",
				"          BirthDate as date,",
				"          MaritalStatus as string,",
				"          Suffix as string,",
				"          Gender as string,",
				"          EmailAddress as string,",
				"          YearlyIncome as string,",
				"          TotalChildren as string,",
				"          NumberChildrenAtHome as string,",
				"          EnglishEducation as string,",
				"          SpanishEducation as string,",
				"          FrenchEducation as string,",
				"          EnglishOccupation as string,",
				"          SpanishOccupation as string,",
				"          FrenchOccupation as string,",
				"          HouseOwnerFlag as string,",
				"          NumberCarsOwned as string,",
				"          AddressLine1 as string,",
				"          AddressLine2 as string,",
				"          Phone as string,",
				"          DateFirstPurchase as date,",
				"          CommuteDistance as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> inCustomerData",
				"source(output(",
				"          GeographyKey as integer,",
				"          City as string,",
				"          StateProvinceCode as string,",
				"          StateProvinceName as string,",
				"          CountryRegionCode as string,",
				"          EnglishCountryRegionName as string,",
				"          SpanishCountryRegionName as string,",
				"          FrenchCountryRegionName as string,",
				"          PostalCode as string,",
				"          SalesTerritoryKey as integer,",
				"          IpAddressLocator as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> InDimGeography",
				"inCustomerData, InDimGeography join(inCustomerData@City == InDimGeography@City",
				"     && inCustomerData@CountryRegionCode == InDimGeography@CountryRegionCode,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> MergeCustonDataDimGeography",
				"MergeCustonDataDimGeography select(mapColumn(",
				"          GeographyKey,",
				"          CustomerAlternateKey,",
				"          FirstName,",
				"          MiddleName,",
				"          LastName,",
				"          BirthDate,",
				"          MaritalStatus,",
				"          Suffix,",
				"          Gender,",
				"          EmailAddress,",
				"          YearlyIncome,",
				"          TotalChildren,",
				"          NumberChildrenAtHome,",
				"          EnglishEducation,",
				"          SpanishEducation,",
				"          FrenchEducation,",
				"          EnglishOccupation,",
				"          SpanishOccupation,",
				"          FrenchOccupation,",
				"          HouseOwnerFlag,",
				"          NumberCarsOwned,",
				"          AddressLine1,",
				"          AddressLine2,",
				"          Phone,",
				"          DateFirstPurchase,",
				"          CommuteDistance",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectImputDimCustomer",
				"SelectImputDimCustomer alterRow() ~> AlterRowUpsetDimCustomer",
				"AlterRowUpsetDimCustomer sink(allowSchemaDrift: true,",
				"     validateSchema: true,",
				"     input(",
				"          CustomerKey as integer,",
				"          GeographyKey as integer,",
				"          CustomerAlternateKey as string,",
				"          FirstName as string,",
				"          MiddleName as string,",
				"          LastName as string,",
				"          BirthDate as date,",
				"          MaritalStatus as string,",
				"          Suffix as string,",
				"          Gender as string,",
				"          EmailAddress as string,",
				"          YearlyIncome as decimal(19,4),",
				"          TotalChildren as integer,",
				"          NumberChildrenAtHome as integer,",
				"          EnglishEducation as string,",
				"          SpanishEducation as string,",
				"          FrenchEducation as string,",
				"          EnglishOccupation as string,",
				"          SpanishOccupation as string,",
				"          FrenchOccupation as string,",
				"          HouseOwnerFlag as string,",
				"          NumberCarsOwned as integer,",
				"          AddressLine1 as string,",
				"          AddressLine2 as string,",
				"          Phone as string,",
				"          DateFirstPurchase as date,",
				"          CommuteDistance as string",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:false,",
				"     upsertable:true,",
				"     keys:['GeographyKey'],",
				"     skipKeyWrites:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          GeographyKey,",
				"          CustomerAlternateKey,",
				"          FirstName,",
				"          MiddleName,",
				"          LastName,",
				"          BirthDate,",
				"          MaritalStatus,",
				"          Suffix,",
				"          Gender,",
				"          EmailAddress,",
				"          EnglishEducation,",
				"          SpanishEducation,",
				"          FrenchEducation,",
				"          EnglishOccupation,",
				"          SpanishOccupation,",
				"          FrenchOccupation,",
				"          HouseOwnerFlag,",
				"          AddressLine1,",
				"          AddressLine2,",
				"          Phone,",
				"          DateFirstPurchase,",
				"          CommuteDistance",
				"     )) ~> sinkSQLServerCustomerData"
			]
		}
	}
}